package bot

import (
	"fmt"
	"github.com/cherya/memezis/pkg/memezis"
	"math/rand"
	"strings"
)

var (
	successTexts = []string{
		"–ø—Ä–∏–Ω—è—Ç–æ",
		"–Ω–∞–π—Å",
		"–∫–∞–π—Ñ",
		"—Å–ø–∞—Å–∏–±–æ",
		"–≤–∞—à –º–µ–º –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å",
		"–Ω–∞–¥–µ—é—Å—å —ç—Ç–æ –Ω–µ –±–æ—è–Ω",
		"–ø–æ—Å–º–æ—Ç—Ä–∏–º...",
		"–ø–µ—Ä–µ–¥–∞–ª –∫—É–¥–∞ —Å–ª–µ–¥—É–µ—Ç.",
	}
	votingTexts       = []string{"üåö", "üíÖüèª", "üëÜüèº", "üí™üèæ", "üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "ü¶ù", "üêª", "üêº", "ü¶ò", "ü¶°", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üêΩ", "üê∏", "üêµ", "üôà", "üôâ", "üôä", "üêí", "üêî", "üêß", "üê¶", "üê§", "üê£", "üê•", "ü¶Ü", "ü¶¢", "ü¶Ö", "ü¶â", "ü¶ö", "ü¶ú", "ü¶á", "üê∫", "üêó", "üê¥", "ü¶Ñ", "üêù", "üêõ", "ü¶ã", "üêå", "üêö", "üêû", "üêú", "ü¶ó", "üï∑", "üï∏", "ü¶Ç", "ü¶ü", "ü¶†", "üê¢", "üêç", "ü¶é", "ü¶ñ", "ü¶ï", "üêô", "ü¶ë", "ü¶ê", "ü¶Ä", "üê°", "üê†", "üêü", "üê¨", "üê≥", "üêã", "ü¶à", "üêä", "üêÖ", "üêÜ", "ü¶ì", "ü¶ç", "üêò", "ü¶è", "ü¶õ", "üê™", "üê´", "ü¶ô", "ü¶í", "üêÉ", "üêÇ", "üêÑ", "üêé", "üêñ", "üêè", "üêë", "üêê", "ü¶å", "üêï", "üê©", "üêà", "üêì", "ü¶É", "üïä", "üêá", "üêÅ", "üêÄ", "üêø", "ü¶î", "üêæ", "üêâ", "üê≤"}
	unsupportedText   = "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –≥–∏—Ñ–∫–∏. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äì –ø–∏—à–∏ @cherya"
	banText           = "—Ç–µ–±—è –¥–∞–∂–µ –±–æ—Ç —Å –º–µ–º–∞–º–∏ –∑–∞–±–∞–Ω–∏–ª, –ø–∏–∑–¥–µ—Ü"
	voteCallbackTexts = []string{"–≥–æ–ª–æ—Å —É—á—Ç–µ–Ω", "–ø–æ—Å—Ç—á–∏—Ç–∞–Ω–æ", "–∑–∞–ø–æ–º–Ω–∏–ª", "–∫–∞–∫ —Å–∫–∞–∂–µ—à—å", "—è –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω, –Ω–æ –ª–∞–¥–Ω–æ", "–æ–∫", "–¥–æ–ø—É—Å—Ç–∏–º", "–∑–∞–ø–∏—Å–∞–ª"}
	alreadyVotedTexts = []string{"–Ω—É —Ç—ã –¥—É—Ä–∞–∫?", "—á–µ —Ç—ã –∂–º–µ—à—å?", "–¥–∞ —É–∂–µ", "???", "#$%&@??"}
	queuedText        = "—É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
	declinedText      = "—É–∂–µ –≤—ã–∫–∏–Ω—É–ª"

	completeDuplicateTexts = []string{"—Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ –±–æ—è–Ω", "–ë–û–Ø–ù!!!", "–î–µ–¥, —Ç–∞–±–ª–µ—Ç–∫–∏"}
	likelyDuplicateTexts = []string{"—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —É–∂–µ –±—ã–ª–æ"}
)

func getVoteCallbackTexts() string {
	return randomText(voteCallbackTexts)
}

func getAlreadyVotedCallbackTexts() string {
	return randomText(alreadyVotedTexts)
}

func getSuccessText() string {
	return randomText(successTexts)
}

func getVotingText() string {
	return randomText(votingTexts)
}

func randomText(t []string) string {
	return t[rand.Intn(len(t))]
}

func getDuplicatesLinks(posts []*memezis.Post) []string {
	var links []string
	for _, c := range posts {
		if c.SourceURL != "" {
			links = append(links, c.SourceURL)
		} else {
			for _, p := range c.Publish {
				links = append(links, p.URL)
			}
		}
	}
	return links
}

func getDuplicatesText(d *memezis.FindDuplicatesByPostIDResponse) string {
	msg := strings.Builder{}
	dupls := d.Likely
	if len(d.Complete) > 0 {
		dupls = d.Complete
	}
	links := getDuplicatesLinks(dupls)
	msg.Write([]byte(randomText(likelyDuplicateTexts)))
	if len(links) != 0 {
		msg.Write([]byte("\n—Å—É—Ä—Å:\n"))
		for _, l := range links {
			msg.Write([]byte(fmt.Sprintf("\n%s", l)))
		}
	}
	return msg.String()
}
